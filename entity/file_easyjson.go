// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8ceb9162DecodeGithubComSoulgardenLogfowdEntity(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Size":
			out.Size = int64(in.Int64())
		case "Offset":
			out.Offset = int64(in.Int64())
		case "Path":
			out.Path = string(in.String())
		case "Meta":
			if in.IsNull() {
				in.Skip()
				out.Meta = nil
			} else {
				if out.Meta == nil {
					out.Meta = new(Meta)
				}
				easyjson8ceb9162DecodeGithubComSoulgardenLogfowdEntity1(in, out.Meta)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ceb9162EncodeGithubComSoulgardenLogfowdEntity(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"Offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"Meta\":"
		out.RawString(prefix)
		if in.Meta == nil {
			out.RawString("null")
		} else {
			easyjson8ceb9162EncodeGithubComSoulgardenLogfowdEntity1(out, *in.Meta)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ceb9162EncodeGithubComSoulgardenLogfowdEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ceb9162EncodeGithubComSoulgardenLogfowdEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ceb9162DecodeGithubComSoulgardenLogfowdEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ceb9162DecodeGithubComSoulgardenLogfowdEntity(l, v)
}
func easyjson8ceb9162DecodeGithubComSoulgardenLogfowdEntity1(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Namespace":
			out.Namespace = string(in.String())
		case "PodName":
			out.PodName = string(in.String())
		case "PodID":
			out.PodID = string(in.String())
		case "ContainerName":
			out.ContainerName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ceb9162EncodeGithubComSoulgardenLogfowdEntity1(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Namespace\":"
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"PodName\":"
		out.RawString(prefix)
		out.String(string(in.PodName))
	}
	{
		const prefix string = ",\"PodID\":"
		out.RawString(prefix)
		out.String(string(in.PodID))
	}
	{
		const prefix string = ",\"ContainerName\":"
		out.RawString(prefix)
		out.String(string(in.ContainerName))
	}
	out.RawByte('}')
}
