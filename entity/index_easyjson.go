// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity(in *jlexer.Lexer, out *IndexRequestBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity(out *jwriter.Writer, in IndexRequestBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexRequestBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexRequestBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexRequestBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexRequestBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity(l, v)
}
func easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity1(in *jlexer.Lexer, out *IndexRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			if in.IsNull() {
				in.Skip()
				out.IndexRequestBody = nil
			} else {
				if out.IndexRequestBody == nil {
					out.IndexRequestBody = new(IndexRequestBody)
				}
				(*out.IndexRequestBody).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity1(out *jwriter.Writer, in IndexRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix[1:])
		if in.IndexRequestBody == nil {
			out.RawString("null")
		} else {
			(*in.IndexRequestBody).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity1(l, v)
}
func easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity2(in *jlexer.Lexer, out *FieldsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "@timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "pod_name":
			out.PodName = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "container_name":
			out.ContainerName = string(in.String())
		case "pod_id":
			out.PodID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity2(out *jwriter.Writer, in FieldsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"@timestamp\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"pod_name\":"
		out.RawString(prefix)
		out.String(string(in.PodName))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"container_name\":"
		out.RawString(prefix)
		out.String(string(in.ContainerName))
	}
	{
		const prefix string = ",\"pod_id\":"
		out.RawString(prefix)
		out.String(string(in.PodID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FieldsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FieldsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2a549a6EncodeGithubComSoulgardenLogfowdEntity2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FieldsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FieldsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2a549a6DecodeGithubComSoulgardenLogfowdEntity2(l, v)
}
