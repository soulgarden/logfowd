// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd887cf1DecodeGithubComSoulgardenLogfowdEntity(in *jlexer.Lexer, out *State) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Files":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Files = make(map[string]*File)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *File
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(File)
						}
						easyjsonBd887cf1DecodeGithubComSoulgardenLogfowdEntity1(in, v1)
					}
					(out.Files)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComSoulgardenLogfowdEntity(out *jwriter.Writer, in State) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Files\":"
		out.RawString(prefix[1:])
		if in.Files == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Files {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					easyjsonBd887cf1EncodeGithubComSoulgardenLogfowdEntity1(out, *v2Value)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v State) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGithubComSoulgardenLogfowdEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v State) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGithubComSoulgardenLogfowdEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *State) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGithubComSoulgardenLogfowdEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *State) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGithubComSoulgardenLogfowdEntity(l, v)
}
func easyjsonBd887cf1DecodeGithubComSoulgardenLogfowdEntity1(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Size":
			out.Size = int64(in.Int64())
		case "Offset":
			out.Offset = int64(in.Int64())
		case "Path":
			out.Path = string(in.String())
		case "Meta":
			if in.IsNull() {
				in.Skip()
				out.Meta = nil
			} else {
				if out.Meta == nil {
					out.Meta = new(Meta)
				}
				easyjsonBd887cf1DecodeGithubComSoulgardenLogfowdEntity2(in, out.Meta)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComSoulgardenLogfowdEntity1(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"Offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"Meta\":"
		out.RawString(prefix)
		if in.Meta == nil {
			out.RawString("null")
		} else {
			easyjsonBd887cf1EncodeGithubComSoulgardenLogfowdEntity2(out, *in.Meta)
		}
	}
	out.RawByte('}')
}
func easyjsonBd887cf1DecodeGithubComSoulgardenLogfowdEntity2(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Namespace":
			out.Namespace = string(in.String())
		case "PodName":
			out.PodName = string(in.String())
		case "PodID":
			out.PodID = string(in.String())
		case "ContainerName":
			out.ContainerName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGithubComSoulgardenLogfowdEntity2(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Namespace\":"
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"PodName\":"
		out.RawString(prefix)
		out.String(string(in.PodName))
	}
	{
		const prefix string = ",\"PodID\":"
		out.RawString(prefix)
		out.String(string(in.PodID))
	}
	{
		const prefix string = ",\"ContainerName\":"
		out.RawString(prefix)
		out.String(string(in.ContainerName))
	}
	out.RawByte('}')
}
